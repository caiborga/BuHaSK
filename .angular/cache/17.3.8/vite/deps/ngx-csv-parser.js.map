{
  "version": 3,
  "sources": ["../../../../../node_modules/ngx-csv-parser/fesm2022/ngx-csv-parser.mjs"],
  "sourcesContent": ["import * as i0 from '@angular/core';\nimport { Injectable, Component, NgModule } from '@angular/core';\nimport { Observable } from 'rxjs';\nclass NgxCSVParserError {}\nclass NgxCsvParser {\n  constructor() {\n    this.defaultCSVParserConfig = {\n      header: true,\n      delimiter: ',',\n      encoding: 'utf8'\n    };\n  }\n  parse(csvFile, config) {\n    config = {\n      ...this.defaultCSVParserConfig,\n      ...config\n    };\n    const ngxCSVParserObserver = new Observable(observer => {\n      try {\n        let csvRecords = null;\n        if (this.isCSVFile(csvFile)) {\n          const reader = new FileReader();\n          reader.readAsText(csvFile, config.encoding);\n          reader.onload = () => {\n            const csvData = reader.result.trim();\n            if (csvData) {\n              const csvRecordsArray = this.csvStringToArray(csvData, config.delimiter);\n              const headersRow = this.getHeaderArray(csvRecordsArray);\n              csvRecords = this.getDataRecordsArrayFromCSVFile(csvRecordsArray, headersRow.length, config);\n              observer.next(csvRecords);\n            } else {\n              observer.next([]);\n            }\n            observer.complete();\n          };\n          reader.onerror = () => {\n            this.badCSVDataFormatErrorHandler(observer);\n          };\n        } else {\n          this.notCSVFileErrorHandler(observer);\n        }\n      } catch (error) {\n        this.unknownCSVParserErrorHandler(observer);\n      }\n    });\n    return ngxCSVParserObserver;\n  }\n  csvStringToArray(csvDataString, delimiter) {\n    const regexPattern = new RegExp(`(\\\\${delimiter}|\\\\r?\\\\n|\\\\r|^)(?:\\\"((?:\\\\\\\\.|\\\"\\\"|[^\\\\\\\\\\\"])*)\\\"|([^\\\\${delimiter}\\\"\\\\r\\\\n]*))`, 'gi');\n    let matchedPatternArray = regexPattern.exec(csvDataString);\n    const resultCSV = [[]];\n    while (matchedPatternArray) {\n      if (matchedPatternArray[1].length && matchedPatternArray[1] !== delimiter) {\n        resultCSV.push([]);\n      }\n      const cleanValue = matchedPatternArray[2] ? matchedPatternArray[2].replace(new RegExp('[\\\\\\\\\"](.)', 'g'), '$1') : matchedPatternArray[3];\n      resultCSV[resultCSV.length - 1].push(cleanValue);\n      matchedPatternArray = regexPattern.exec(csvDataString);\n    }\n    return resultCSV;\n  }\n  getDataRecordsArrayFromCSVFile(csvRecordsArray, headerLength, config) {\n    const dataArr = [];\n    const headersArray = csvRecordsArray[0];\n    const startingRowToParseData = config.header ? 1 : 0;\n    for (let i = startingRowToParseData; i < csvRecordsArray.length; i++) {\n      const data = csvRecordsArray[i];\n      if (data.length === headerLength && config.header) {\n        const csvRecord = {};\n        for (let j = 0; j < data.length; j++) {\n          if (data[j] === undefined || data[j] === null) {\n            csvRecord[headersArray[j]] = '';\n          } else {\n            csvRecord[headersArray[j]] = data[j].trim();\n          }\n        }\n        dataArr.push(csvRecord);\n      } else {\n        dataArr.push(data);\n      }\n    }\n    return dataArr;\n  }\n  isCSVFile(file) {\n    return file.name.toLowerCase().endsWith('.csv');\n  }\n  getHeaderArray(csvRecordsArr) {\n    const headers = csvRecordsArr[0];\n    const headerArray = [];\n    for (const header of headers) {\n      headerArray.push(header);\n    }\n    return headerArray;\n  }\n  notCSVFileErrorHandler(observer) {\n    const ngcCSVParserError = this.errorBuilder('NOT_A_CSV_FILE', 'Selected file is not a csv File Type.', 2);\n    observer.error(ngcCSVParserError);\n  }\n  unknownCSVParserErrorHandler(observer) {\n    const ngcCSVParserError = this.errorBuilder('UNKNOWN_ERROR', 'Unknown error. Please refer to official documentation for library usage.', 404);\n    observer.error(ngcCSVParserError);\n  }\n  badCSVDataFormatErrorHandler(observer) {\n    const ngcCSVParserError = this.errorBuilder('BAD_CSV_DATA_FORMAT', 'Unable to parse CSV File.', 1);\n    observer.error(ngcCSVParserError);\n  }\n  errorBuilder(type, message, code) {\n    const ngcCSVParserError = new NgxCSVParserError();\n    ngcCSVParserError.type = type;\n    ngcCSVParserError.message = message;\n    ngcCSVParserError.code = code;\n    return ngcCSVParserError;\n  }\n  static {\n    this.ɵfac = function NgxCsvParser_Factory(t) {\n      return new (t || NgxCsvParser)();\n    };\n  }\n  static {\n    this.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: NgxCsvParser,\n      factory: NgxCsvParser.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCsvParser, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], null, null);\n})();\nclass NgxCsvParserComponent {\n  constructor() {}\n  ngOnInit() {}\n  static {\n    this.ɵfac = function NgxCsvParserComponent_Factory(t) {\n      return new (t || NgxCsvParserComponent)();\n    };\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: NgxCsvParserComponent,\n      selectors: [[\"lib-ngx-csv-parser\"]],\n      decls: 2,\n      vars: 0,\n      template: function NgxCsvParserComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"p\");\n          i0.ɵɵtext(1, \" ngx-csv-parser works! \");\n          i0.ɵɵelementEnd();\n        }\n      },\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCsvParserComponent, [{\n    type: Component,\n    args: [{\n      selector: 'lib-ngx-csv-parser',\n      template: `\n    <p>\n      ngx-csv-parser works!\n    </p>\n  `\n    }]\n  }], function () {\n    return [];\n  }, null);\n})();\nclass NgxCsvParserModule {\n  static {\n    this.ɵfac = function NgxCsvParserModule_Factory(t) {\n      return new (t || NgxCsvParserModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: NgxCsvParserModule,\n      declarations: [NgxCsvParserComponent],\n      exports: [NgxCsvParserComponent]\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      providers: [NgxCsvParser]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(NgxCsvParserModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [NgxCsvParserComponent],\n      imports: [],\n      providers: [NgxCsvParser],\n      exports: [NgxCsvParserComponent]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ngx-csv-parser\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgxCSVParserError, NgxCsvParser, NgxCsvParserComponent, NgxCsvParserModule };\n"],
  "mappings": "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",
  "names": []
}
